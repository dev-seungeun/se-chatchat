{"ast":null,"code":"import React, { useState, useEffect, useRef } from \"react\";\nimport throttle from \"./useThrottle\";\n\nconst useNotification = () => {\n  // const notificationRef = useRef();\n  // const timerRef = useRef();\n  if (!(\"Notification\" in window)) {\n    return;\n  }\n\n  if (Notification.permission !== \"granted\") {\n    try {\n      Notification.requestPermission().then(permission => {\n        if (permission !== 'granted') return; //else new Notification(title, options);\n      });\n    } catch (error) {\n      if (error instanceof TypeError) {\n        Notification.requestPermission(permission => {\n          if (permission !== 'granted') return; //else new Notification(title, options);\n        });\n      } else {\n        console.error(error);\n      }\n    }\n  }\n  /*\r\n    const setNotificationClickEvent = () => {\r\n      notificationRef.current.onclick = (event) => {\r\n        event.preventDefault();\r\n        window.focus();\r\n        notificationRef.current.close();\r\n      };\r\n    };\r\n  */\n\n  /*\r\n    const setNotificationTimer = (timeout) => {\r\n       throttle(() => {\r\n         notificationRef.current.close();\r\n         notificationRef.current = null;\r\n       }, timeout);\r\n    };\r\n  */\n  // 어떤 알림을 보낼 것인지, 몇 초마다 알림을 보낼 것인지에 대한 함수\n\n\n  const fireNotificationWithTimeout = function (title, timeout) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // 만약 유저가 푸시 알림을 꺼놓았다면 함수가 실행되지 않게 미리 return을 해준다.\n    // 그런데 가드를 세워놨음에도 불구하고, Safari에서 실행되지 않는 문제점이 있었다. 이 문제는 해결중이다 ㅜㅜ!\n    if (Notification.permission !== 'granted') return; // Notification API는 두 번째 인자로 option 값을 받는데, 뱃지 이미지와 아이콘 등을 설정해 줄 수 있다.\n    // 초기 badge, icon을 설정해주었다.\n\n    const newOption = { // badge: 'https://babble.gg/img/logos/babble-speech-bubble.png',\n      // icon: 'https://babble.gg/img/logos/babble-speech-bubble.png',\n      ...options\n    };\n    new Notification(title, newOption);\n    /*\r\n        // 만약 notificationRef가 아직 초기화되지 않았다면, 타이머가 아직 동작하고 있는거니까 notificationRef가 없을 때에만 새로운 알림을 만든다.\r\n        if (!notificationRef.current) {\r\n          // 여기 들어왔다는건 타이머가 실행되지 않고 있다는 것이니까, 타이머를 만들어준다.\r\n          setNotificationTimer(timeout);\r\n    \r\n          // 푸시 알림에서 보여줄 title과 위에서 우리가 만든 custom option을 넣어준다.\r\n          // 이 Notification 함수는 할당해도 바로 실행되기 때문에 첫 이벤트는 무조건 실행되고, 그 이후부터 타이머가 작동한다.\r\n          notificationRef.current = new Notification(title, newOption);\r\n    \r\n          // // Notification의 Click Event를 새로 붙여준다.\r\n          setNotificationClickEvent();\r\n        }\r\n    */\n  };\n\n  return {\n    fireNotificationWithTimeout\n  };\n};\n\nexport default useNotification;","map":{"version":3,"sources":["C:/workspaces/atom_workspace/sesh-chatchat/src/helpers/useNotification.js"],"names":["React","useState","useEffect","useRef","throttle","useNotification","window","Notification","permission","requestPermission","then","error","TypeError","console","fireNotificationWithTimeout","title","timeout","options","newOption"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,QAAP,MAAqB,eAArB;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAE5B;AACA;AAEA,MAAI,EAAE,kBAAkBC,MAApB,CAAJ,EAAiC;AAC/B;AACD;;AAED,MAAIC,YAAY,CAACC,UAAb,KAA4B,SAAhC,EAA2C;AACzC,QAAI;AACFD,MAAAA,YAAY,CAACE,iBAAb,GAAiCC,IAAjC,CAAuCF,UAAD,IAAgB;AACpD,YAAIA,UAAU,KAAK,SAAnB,EAA8B,OADsB,CAEpD;AACD,OAHD;AAID,KALD,CAKE,OAAOG,KAAP,EAAc;AACd,UAAIA,KAAK,YAAYC,SAArB,EAAgC;AAC9BL,QAAAA,YAAY,CAACE,iBAAb,CAAgCD,UAAD,IAAgB;AAC7C,cAAIA,UAAU,KAAK,SAAnB,EAA8B,OADe,CAE7C;AACD,SAHD;AAID,OALD,MAKO;AACLK,QAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;AACF;AACF;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;;;AACA,QAAMG,2BAA2B,GAAG,UAACC,KAAD,EAAQC,OAAR,EAAkC;AAAA,QAAjBC,OAAiB,uEAAP,EAAO;AACpE;AACA;AACA,QAAIV,YAAY,CAACC,UAAb,KAA4B,SAAhC,EAA2C,OAHyB,CAKpE;AACA;;AACA,UAAMU,SAAS,GAAG,EAChB;AACA;AACA,SAAGD;AAHa,KAAlB;AAMA,QAAIV,YAAJ,CAAiBQ,KAAjB,EAAwBG,SAAxB;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,GA7BD;;AA+BA,SAAO;AAAEJ,IAAAA;AAAF,GAAP;AAED,CAhFD;;AAkFA,eAAeT,eAAf","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport throttle from \"./useThrottle\"\r\n\r\nconst useNotification = () => {\r\n\r\n  // const notificationRef = useRef();\r\n  // const timerRef = useRef();\r\n\r\n  if (!(\"Notification\" in window)) {\r\n    return;\r\n  }\r\n\r\n  if (Notification.permission !== \"granted\") {\r\n    try {\r\n      Notification.requestPermission().then((permission) => {\r\n        if (permission !== 'granted') return;\r\n        //else new Notification(title, options);\r\n      });\r\n    } catch (error) {\r\n      if (error instanceof TypeError) {\r\n        Notification.requestPermission((permission) => {\r\n          if (permission !== 'granted') return;\r\n          //else new Notification(title, options);\r\n        });\r\n      } else {\r\n        console.error(error);\r\n      }\r\n    }\r\n  }\r\n\r\n/*\r\n  const setNotificationClickEvent = () => {\r\n    notificationRef.current.onclick = (event) => {\r\n      event.preventDefault();\r\n      window.focus();\r\n      notificationRef.current.close();\r\n    };\r\n  };\r\n*/\r\n\r\n/*\r\n  const setNotificationTimer = (timeout) => {\r\n     throttle(() => {\r\n       notificationRef.current.close();\r\n       notificationRef.current = null;\r\n     }, timeout);\r\n  };\r\n*/\r\n\r\n  // 어떤 알림을 보낼 것인지, 몇 초마다 알림을 보낼 것인지에 대한 함수\r\n  const fireNotificationWithTimeout = (title, timeout, options = {}) => {\r\n    // 만약 유저가 푸시 알림을 꺼놓았다면 함수가 실행되지 않게 미리 return을 해준다.\r\n    // 그런데 가드를 세워놨음에도 불구하고, Safari에서 실행되지 않는 문제점이 있었다. 이 문제는 해결중이다 ㅜㅜ!\r\n    if (Notification.permission !== 'granted') return;\r\n\r\n    // Notification API는 두 번째 인자로 option 값을 받는데, 뱃지 이미지와 아이콘 등을 설정해 줄 수 있다.\r\n    // 초기 badge, icon을 설정해주었다.\r\n    const newOption = {\r\n      // badge: 'https://babble.gg/img/logos/babble-speech-bubble.png',\r\n      // icon: 'https://babble.gg/img/logos/babble-speech-bubble.png',\r\n      ...options,\r\n    };\r\n\r\n    new Notification(title, newOption);\r\n\r\n/*\r\n    // 만약 notificationRef가 아직 초기화되지 않았다면, 타이머가 아직 동작하고 있는거니까 notificationRef가 없을 때에만 새로운 알림을 만든다.\r\n    if (!notificationRef.current) {\r\n      // 여기 들어왔다는건 타이머가 실행되지 않고 있다는 것이니까, 타이머를 만들어준다.\r\n      setNotificationTimer(timeout);\r\n\r\n      // 푸시 알림에서 보여줄 title과 위에서 우리가 만든 custom option을 넣어준다.\r\n      // 이 Notification 함수는 할당해도 바로 실행되기 때문에 첫 이벤트는 무조건 실행되고, 그 이후부터 타이머가 작동한다.\r\n      notificationRef.current = new Notification(title, newOption);\r\n\r\n      // // Notification의 Click Event를 새로 붙여준다.\r\n      setNotificationClickEvent();\r\n    }\r\n*/\r\n  };\r\n\r\n  return { fireNotificationWithTimeout };\r\n\r\n};\r\n\r\nexport default useNotification;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspaces\\\\atom_workspace\\\\sesh-chatchat\\\\src\\\\pages\\\\Room.js\",\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getRoomsInfo, getRoomsAuth, getCommonInfo, setCommonInfo } from \"../helpers/database\";\nimport { authService } from \"../services/firebase\";\nimport { logout } from \"../helpers/auth\";\nimport MyNotification from \"../helpers/MyNotification\";\nimport \"../rooms.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Room() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [roomList, setRoomList] = useState(\"\");\n  let navigate = useNavigate();\n  let isMount = true;\n  let selectedRoom = \"\";\n  let checkRooms = {};\n\n  const getRoomList = async () => {\n    const callback = rooms => {\n      Object.keys(rooms).forEach((roomName, index) => getRoomsAuth(roomName, function (res) {\n        if (Object.keys(res).includes(authService.currentUser.uid)) {\n          checkRooms[roomName] = rooms[roomName];\n        }\n\n        if (index + 1 == Object.keys(rooms).length) {\n          const myList = () => {\n            const list = Object.keys(checkRooms).map((roomName, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"room\",\n                type: \"button\",\n                onClick: handleSelectRoom,\n                value: roomName,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: roomName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 37,\n                  columnNumber: 21\n                }, this)\n              }, createItem(index + \"room\"), false, {\n                fileName: _jsxFileName,\n                lineNumber: 31,\n                columnNumber: 19\n              }, this)\n            }, createItem(index + \"li\"), false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 17\n            }, this));\n            return /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: list\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 22\n            }, this);\n          };\n\n          setRoomList(myList);\n        }\n      }));\n    };\n\n    const notiCallback = (roomName, chatInfo) => {\n      getRoomsAuth(roomName, function (res) {\n        if (Object.keys(res).includes(authService.currentUser.uid)) {\n          const selectedRoom = getCommonInfo(\"selectedRoom\");\n\n          if (chatInfo.date > Date.now() && (isMount || !isMount && selectedRoom != roomName)) {\n            notify(roomName, chatInfo.uid);\n          }\n        }\n      });\n    };\n\n    getRoomsInfo(callback, notiCallback);\n  };\n\n  const notify = (roomName, uid) => {\n    _s();\n\n    if (uid !== authService.currentUser.uid) {\n      MyNotification.useNotification('SESH', {\n        body: \"from '\" + roomName + \"''\"\n      });\n    }\n  }; // USE EFFECT  ---------------------------------------\n\n\n  _s(notify, \"5Wvo13JDZyE5NG8yw+lSYQ3PyGg=\", false, function () {\n    return [MyNotification.useNotification];\n  });\n\n  useEffect(() => {\n    getRoomList();\n    setCommonInfo(\"selectedRoom\", \"\");\n    return () => {\n      isMount = false;\n    };\n  }, []); // HANDLE  -------------------------------------------\n\n  const handleSelectRoom = async e => {\n    e.preventDefault();\n    const roomName = e.target.value;\n\n    if (roomName == undefined || roomName == \"undefined\") {\n      alert(\"방을 다시 선택해주세요\");\n    } else {\n      getRoomsAuth(roomName, function (res) {\n        if (Object.keys(res).includes(authService.currentUser.uid)) {\n          console.log(\"[\" + roomName + \"] 입장\");\n          setCommonInfo(\"selectedRoom\", roomName);\n          navigate(`/chat?room=${roomName}`);\n        } else {\n          alert(\"'\" + roomName + \"' 방 입장권한이 없습니다.\");\n        }\n      });\n    }\n  };\n\n  const handleGoogleLogOut = async () => {\n    try {\n      await logout();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ETC ----------------------------------------------\n\n\n  let itemId = 1;\n\n  const createItem = text => {\n    return itemId++ + text;\n  }; // --------------------------------------------------\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room-wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"logout-room\",\n      type: \"button\",\n      onClick: handleGoogleLogOut,\n      children: \"LOGOUT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: roomList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Room, \"u5sjzhVCiKk8cjGmGjLnom5iOQg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Room;\nexport default Room;\n\nvar _c;\n\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"sources":["C:/workspaces/atom_workspace/sesh-chatchat/src/pages/Room.js"],"names":["useState","useEffect","useNavigate","getRoomsInfo","getRoomsAuth","getCommonInfo","setCommonInfo","authService","logout","MyNotification","Room","roomList","setRoomList","navigate","isMount","selectedRoom","checkRooms","getRoomList","callback","rooms","Object","keys","forEach","roomName","index","res","includes","currentUser","uid","length","myList","list","map","handleSelectRoom","createItem","notiCallback","chatInfo","date","Date","now","notify","useNotification","body","e","preventDefault","target","value","undefined","alert","console","log","handleGoogleLogOut","error","itemId","text"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { getRoomsInfo, getRoomsAuth, getCommonInfo, setCommonInfo } from \"../helpers/database\";\r\nimport { authService } from \"../services/firebase\";\r\nimport { logout } from \"../helpers/auth\";\r\nimport MyNotification from \"../helpers/MyNotification\";\r\nimport \"../rooms.css\"\r\n\r\nfunction Room() {\r\n\r\n  const [roomList, setRoomList] = useState(\"\");\r\n  let navigate = useNavigate();\r\n  let isMount = true;\r\n  let selectedRoom = \"\";\r\n  let checkRooms = {};\r\n\r\n  const getRoomList = async() => {\r\n\r\n    const callback = (rooms) => {\r\n\r\n      Object.keys(rooms).forEach((roomName, index) => (\r\n        getRoomsAuth(roomName, function(res) {\r\n          if(Object.keys(res).includes(authService.currentUser.uid)) {\r\n            checkRooms[roomName] = rooms[roomName]\r\n          }\r\n\r\n          if(index+1 == Object.keys(rooms).length) {\r\n            const myList = () => {\r\n              const list = Object.keys(checkRooms).map((roomName, index) => (\r\n                <li key={createItem(index+\"li\")}>\r\n                  <button\r\n                    key={createItem(index+\"room\")}\r\n                    className = \"room\"\r\n                    type=\"button\"\r\n                    onClick={handleSelectRoom}\r\n                    value={roomName}>\r\n                    <span>{roomName}</span>\r\n                  </button>\r\n                </li>\r\n              ));\r\n              return <ul>{list}</ul>;\r\n            };\r\n\r\n            setRoomList(myList);\r\n          }\r\n        })\r\n      ));\r\n\r\n    }\r\n\r\n    const notiCallback = (roomName, chatInfo) => {\r\n      getRoomsAuth(roomName, function(res) {\r\n        if(Object.keys(res).includes(authService.currentUser.uid)) {\r\n          const selectedRoom = getCommonInfo(\"selectedRoom\");\r\n          if(chatInfo.date > Date.now()\r\n                && (isMount || (!isMount && selectedRoom != roomName))) {\r\n            notify(roomName, chatInfo.uid);\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    getRoomsInfo(callback, notiCallback);\r\n\r\n  };\r\n\r\n  const notify = (roomName, uid) => {\r\n    if(uid !== authService.currentUser.uid) {\r\n      MyNotification.useNotification('SESH', {\r\n        body: \"from '\"+roomName+\"''\"\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n// USE EFFECT  ---------------------------------------\r\n  useEffect(() => {\r\n    getRoomList();\r\n    setCommonInfo(\"selectedRoom\", \"\");\r\n    return() => {\r\n      isMount = false;\r\n    }\r\n  }, []);\r\n\r\n\r\n// HANDLE  -------------------------------------------\r\n  const handleSelectRoom = async (e) => {\r\n    e.preventDefault();\r\n    const roomName = e.target.value;\r\n    if(roomName == undefined || roomName == \"undefined\") {\r\n      alert(\"방을 다시 선택해주세요\");\r\n    }else {\r\n      getRoomsAuth(roomName, function(res) {\r\n        if(Object.keys(res).includes(authService.currentUser.uid)) {\r\n          console.log(\"[\"+roomName+\"] 입장\")\r\n          setCommonInfo(\"selectedRoom\", roomName);\r\n          navigate(`/chat?room=${roomName}`);\r\n        }else {\r\n          alert(\"'\"+roomName+\"' 방 입장권한이 없습니다.\")\r\n        }\r\n      })\r\n    }\r\n  };\r\n\r\n  const handleGoogleLogOut = async () => {\r\n    try {\r\n      await logout();\r\n    } catch (error) {\r\n     console.log(error);\r\n    }\r\n  };\r\n\r\n\r\n// ETC ----------------------------------------------\r\n  let itemId = 1;\r\n  const createItem = (text) => {\r\n    return (itemId++) + text;\r\n  }\r\n// --------------------------------------------------\r\n\r\n\r\n  return (\r\n    <div className=\"room-wrap\">\r\n      <button\r\n        className=\"logout-room\"\r\n        type=\"button\"\r\n        onClick={handleGoogleLogOut}>\r\n        LOGOUT\r\n      </button>\r\n      <br/><br/>\r\n      <div>\r\n        {roomList}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Room;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { database, database_set, database_ref, database_on_value } from \"../services/firebase\";\nimport { onChildAdded, onValue, query, orderByKey, orderByChild, limitToLast, startAt } from \"firebase/database\";\nexport function getRooms(callback) {\n  const roomRef = database_ref(database, \"chats/rooms\");\n  onValue(roomRef, snapshot => {\n    callback(snapshot.val());\n  });\n}\nexport function getRoomsAuth(callback) {\n  const roomAuthRef = query(database_ref(database, 'chats/' + roomName + \"/messages\"), limitToLast(1));\n  onChildAdded(roomAuthRef, snapshot => {\n    console.log(snapshot);\n    console.log(snapshot.val());\n    callback(snapshot);\n  });\n}\nexport function sendChat(roomName, data) {\n  return database_set(database_ref(database, 'chats/' + roomName + \"/messages\" + \"/\" + data.timestamp), {\n    message: data.message,\n    timestamp: data.timestamp,\n    email: data.email,\n    uid: data.uid\n  });\n}\nexport function getAddedChats(roomName, callback) {\n  const date = new Date();\n  const today = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0).getTime();\n  let chatList = [];\n  const chatRef = query(database_ref(database, 'chats/' + roomName + \"/messages\"), orderByKey(), startAt(today.toString()), limitToLast(10));\n  onChildAdded(chatRef, snapshot => {\n    if (snapshot.val().hasOwnProperty(\"uid\")) {\n      chatList.push(snapshot.val());\n    }\n\n    callback(chatList);\n  });\n  callback(chatList, true);\n}\n/*\r\nexport function getChats(roomName, callback) {\r\n  let chatList = [];\r\n  const date = new Date();\r\n  const today = (new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0)).getTime();\r\n  const chatRef = query(database_ref(database, 'chats/'+roomName), orderByKey(), startAt(today.toString()), limitToLast(10));\r\n  const chatRef2 = database_ref(database);\r\n  get(child(chatRef2, 'chats/'+roomName), limitToLast(10)).then((snapshot) => {\r\n    snapshot.forEach((row) => {\r\n      chatList.push(row.val());\r\n    });\r\n  },[]);\r\n  callback(chatList);\r\n}\r\n*/","map":{"version":3,"sources":["C:/workspaces/atom_workspace/sesh-chatchat/src/helpers/database.js"],"names":["database","database_set","database_ref","database_on_value","onChildAdded","onValue","query","orderByKey","orderByChild","limitToLast","startAt","getRooms","callback","roomRef","snapshot","val","getRoomsAuth","roomAuthRef","roomName","console","log","sendChat","data","timestamp","message","email","uid","getAddedChats","date","Date","today","getFullYear","getMonth","getDate","getTime","chatList","chatRef","toString","hasOwnProperty","push"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,YAAnB,EAAiCC,YAAjC,EAA+CC,iBAA/C,QAAwE,sBAAxE;AACA,SAASC,YAAT,EAAuBC,OAAvB,EAAgCC,KAAhC,EAAuCC,UAAvC,EAAmDC,YAAnD,EAAiEC,WAAjE,EAA8EC,OAA9E,QAA6F,mBAA7F;AAEA,OAAO,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AACjC,QAAMC,OAAO,GAAGX,YAAY,CAACF,QAAD,EAAW,aAAX,CAA5B;AACAK,EAAAA,OAAO,CAACQ,OAAD,EAAWC,QAAD,IAAc;AAC7BF,IAAAA,QAAQ,CAACE,QAAQ,CAACC,GAAT,EAAD,CAAR;AACD,GAFM,CAAP;AAGD;AAED,OAAO,SAASC,YAAT,CAAsBJ,QAAtB,EAAgC;AACrC,QAAMK,WAAW,GAAGX,KAAK,CAACJ,YAAY,CAACF,QAAD,EAAW,WAASkB,QAAT,GAAkB,WAA7B,CAAb,EAAwDT,WAAW,CAAC,CAAD,CAAnE,CAAzB;AACAL,EAAAA,YAAY,CAACa,WAAD,EAAeH,QAAD,IAAc;AACtCK,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACC,GAAT,EAAZ;AACAH,IAAAA,QAAQ,CAACE,QAAD,CAAR;AACD,GAJW,CAAZ;AAKD;AAED,OAAO,SAASO,QAAT,CAAkBH,QAAlB,EAA4BI,IAA5B,EAAkC;AACvC,SAAOrB,YAAY,CAACC,YAAY,CAACF,QAAD,EAAW,WAASkB,QAAT,GAAkB,WAAlB,GAA8B,GAA9B,GAAkCI,IAAI,CAACC,SAAlD,CAAb,EAA2E;AAC5FC,IAAAA,OAAO,EAAEF,IAAI,CAACE,OAD8E;AAE5FD,IAAAA,SAAS,EAAED,IAAI,CAACC,SAF4E;AAG5FE,IAAAA,KAAK,EAAEH,IAAI,CAACG,KAHgF;AAI5FC,IAAAA,GAAG,EAAEJ,IAAI,CAACI;AAJkF,GAA3E,CAAnB;AAMD;AAED,OAAO,SAASC,aAAT,CAAuBT,QAAvB,EAAiCN,QAAjC,EAA2C;AAChD,QAAMgB,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACA,QAAMC,KAAK,GAAI,IAAID,IAAJ,CAASD,IAAI,CAACG,WAAL,EAAT,EAA6BH,IAAI,CAACI,QAAL,EAA7B,EAA8CJ,IAAI,CAACK,OAAL,EAA9C,EAA8D,CAA9D,EAAiE,CAAjE,EAAoE,CAApE,EAAuE,CAAvE,CAAD,CAA4EC,OAA5E,EAAd;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,QAAMC,OAAO,GAAG9B,KAAK,CAACJ,YAAY,CAACF,QAAD,EAAW,WAASkB,QAAT,GAAkB,WAA7B,CAAb,EAAwDX,UAAU,EAAlE,EAAsEG,OAAO,CAACoB,KAAK,CAACO,QAAN,EAAD,CAA7E,EAAiG5B,WAAW,CAAC,EAAD,CAA5G,CAArB;AACAL,EAAAA,YAAY,CAACgC,OAAD,EAAWtB,QAAD,IAAc;AAClC,QAAGA,QAAQ,CAACC,GAAT,GAAeuB,cAAf,CAA8B,KAA9B,CAAH,EAAyC;AACvCH,MAAAA,QAAQ,CAACI,IAAT,CAAczB,QAAQ,CAACC,GAAT,EAAd;AACD;;AACDH,IAAAA,QAAQ,CAACuB,QAAD,CAAR;AACD,GALW,CAAZ;AAMAvB,EAAAA,QAAQ,CAACuB,QAAD,EAAW,IAAX,CAAR;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { database, database_set, database_ref, database_on_value } from \"../services/firebase\";\r\nimport { onChildAdded, onValue, query, orderByKey, orderByChild, limitToLast, startAt } from \"firebase/database\";\r\n\r\nexport function getRooms(callback) {\r\n  const roomRef = database_ref(database, \"chats/rooms\");\r\n  onValue(roomRef, (snapshot) => {\r\n    callback(snapshot.val());\r\n  });\r\n}\r\n\r\nexport function getRoomsAuth(callback) {\r\n  const roomAuthRef = query(database_ref(database, 'chats/'+roomName+\"/messages\"), limitToLast(1));\r\n  onChildAdded(roomAuthRef, (snapshot) => {\r\n    console.log(snapshot);\r\n    console.log(snapshot.val());\r\n    callback(snapshot);\r\n  });\r\n}\r\n\r\nexport function sendChat(roomName, data) {\r\n  return database_set(database_ref(database, 'chats/'+roomName+\"/messages\"+\"/\"+data.timestamp), {\r\n    message: data.message,\r\n    timestamp: data.timestamp,\r\n    email: data.email,\r\n    uid: data.uid\r\n  });\r\n}\r\n\r\nexport function getAddedChats(roomName, callback) {\r\n  const date = new Date();\r\n  const today = (new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0)).getTime();\r\n  let chatList = [];\r\n  const chatRef = query(database_ref(database, 'chats/'+roomName+\"/messages\"), orderByKey(), startAt(today.toString()), limitToLast(10));\r\n  onChildAdded(chatRef, (snapshot) => {\r\n    if(snapshot.val().hasOwnProperty(\"uid\")) {\r\n      chatList.push(snapshot.val());\r\n    }\r\n    callback(chatList);\r\n  });\r\n  callback(chatList, true);\r\n}\r\n\r\n/*\r\nexport function getChats(roomName, callback) {\r\n  let chatList = [];\r\n  const date = new Date();\r\n  const today = (new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0)).getTime();\r\n  const chatRef = query(database_ref(database, 'chats/'+roomName), orderByKey(), startAt(today.toString()), limitToLast(10));\r\n  const chatRef2 = database_ref(database);\r\n  get(child(chatRef2, 'chats/'+roomName), limitToLast(10)).then((snapshot) => {\r\n    snapshot.forEach((row) => {\r\n      chatList.push(row.val());\r\n    });\r\n  },[]);\r\n  callback(chatList);\r\n}\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}
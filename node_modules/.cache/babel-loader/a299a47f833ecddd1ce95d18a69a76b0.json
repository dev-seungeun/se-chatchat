{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useNavigate } from \"react-router-dom\";\n\nfunction MyNotification() {\n  _s();\n\n  let navigate = useNavigate();\n\n  const useNotification = (title, option) => {\n    if (!(\"Notification\" in window)) {\n      return;\n    }\n\n    if (Notification.permission !== \"granted\") {\n      try {\n        Notification.requestPermission().then(permission => {\n          if (permission !== 'granted') return;\n        });\n      } catch (error) {\n        if (error instanceof TypeError) {\n          Notification.requestPermission(permission => {\n            if (permission !== 'granted') return;\n          });\n        } else {\n          console.error(error);\n        }\n      }\n    } else {\n      var notification = new Notification(title, option);\n\n      notification.onclick = function (event) {\n        event.preventDefault();\n        window.focus();\n        navigate(`/chat?room=${title}`); // notificationRef.close();\n      };\n    }\n  };\n}\n\n_s(MyNotification, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = MyNotification;\nexport default MyNotification;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyNotification\");","map":{"version":3,"sources":["C:/workspaces/atom_workspace/sesh-chatchat/src/helpers/MyNotification.js"],"names":["useNavigate","MyNotification","navigate","useNotification","title","option","window","Notification","permission","requestPermission","then","error","TypeError","console","notification","onclick","event","preventDefault","focus"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,kBAA5B;;AAEA,SAASC,cAAT,GAA0B;AAAA;;AAExB,MAAIC,QAAQ,GAAGF,WAAW,EAA1B;;AAEA,QAAMG,eAAe,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAEzC,QAAI,EAAE,kBAAkBC,MAApB,CAAJ,EAAiC;AAC/B;AACD;;AAED,QAAIC,YAAY,CAACC,UAAb,KAA4B,SAAhC,EAA2C;AACzC,UAAI;AACFD,QAAAA,YAAY,CAACE,iBAAb,GAAiCC,IAAjC,CAAuCF,UAAD,IAAgB;AACpD,cAAIA,UAAU,KAAK,SAAnB,EAA8B;AAC/B,SAFD;AAGD,OAJD,CAIE,OAAOG,KAAP,EAAc;AACd,YAAIA,KAAK,YAAYC,SAArB,EAAgC;AAC9BL,UAAAA,YAAY,CAACE,iBAAb,CAAgCD,UAAD,IAAgB;AAC7C,gBAAIA,UAAU,KAAK,SAAnB,EAA8B;AAC/B,WAFD;AAGD,SAJD,MAIO;AACLK,UAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;AACF;AACF,KAdD,MAcM;AACJ,UAAIG,YAAY,GAAG,IAAIP,YAAJ,CAAiBH,KAAjB,EAAwBC,MAAxB,CAAnB;;AACAS,MAAAA,YAAY,CAACC,OAAb,GAAuB,UAASC,KAAT,EAAgB;AACrCA,QAAAA,KAAK,CAACC,cAAN;AACAX,QAAAA,MAAM,CAACY,KAAP;AACAhB,QAAAA,QAAQ,CAAE,cAAaE,KAAM,EAArB,CAAR,CAHqC,CAIrC;AACD,OALD;AAMD;AAEF,GA9BD;AAgCD;;GApCQH,c;UAEQD,W;;;KAFRC,c;AAsCT,eAAeA,cAAf","sourcesContent":["import { useNavigate } from \"react-router-dom\";\r\n\r\nfunction MyNotification() {\r\n\r\n  let navigate = useNavigate();\r\n\r\n  const useNotification = (title, option) => {\r\n\r\n    if (!(\"Notification\" in window)) {\r\n      return;\r\n    }\r\n\r\n    if (Notification.permission !== \"granted\") {\r\n      try {\r\n        Notification.requestPermission().then((permission) => {\r\n          if (permission !== 'granted') return;\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof TypeError) {\r\n          Notification.requestPermission((permission) => {\r\n            if (permission !== 'granted') return;\r\n          });\r\n        } else {\r\n          console.error(error);\r\n        }\r\n      }\r\n    }else {\r\n      var notification = new Notification(title, option);\r\n      notification.onclick = function(event) {\r\n        event.preventDefault();\r\n        window.focus();\r\n        navigate(`/chat?room=${title}`);\r\n        // notificationRef.close();\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n}\r\n\r\nexport default MyNotification;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspaces\\\\atom_workspace\\\\sesh-chatchat\\\\src\\\\pages\\\\Room.js\";\nimport { Component, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getRooms, getRoomsAuth, getAddedChats } from \"../helpers/database\";\nimport { authService } from \"../services/firebase\";\nimport { logout } from \"../helpers/auth\";\nimport Chat from \"./Chat\";\nimport \"../rooms.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Room extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chatInfo: {},\n      rooms: []\n    };\n    this.getRoomList = this.getRoomList.bind(this);\n  }\n\n  async getRoomList(roomObject) {\n    const myList = () => {\n      const list = Object.values(roomObject).map((roomName, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"room\",\n          type: \"button\",\n          onClick: handleSelectRoom,\n          value: roomName,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: roomName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this)\n        }, createItem(index + \"room\"), false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)\n      }, createItem(index + \"li\"), false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this));\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: list\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 14\n      }, this);\n    };\n\n    console.log(myList);\n    this.setState({\n      rooms: myList\n    }); // setRooms(myList);\n    // Object.values(roomObject).forEach((roomName, index) => {\n    //   getAddedChats(roomName, Chat.setChatUI, function(chatList) {\n    //     this.state.chatInfo[`${roomName}`] = chatList;\n    //   });\n    // });\n  }\n\n  componentDidMount() {\n    this.getRoomList();\n  }\n\n  render() {\n    console.log(this.props); // const [rooms, setRooms] = useState(\"\");\n    // const [chatInfo, setChatInfo] = useState({ roomName: \"\", chatList: \"\" });\n    // let navigate = useNavigate();\n\n    function getChatInfo(roomName) {\n      return this.state.chatInfo[`${roomName}`];\n    } // USE EFFECT  ---------------------------------------\n    // useEffect(() => {\n    //   getRoomList();\n    // }, []);\n    // HANDLE  -------------------------------------------\n\n\n    const handleSelectRoom = async e => {\n      e.preventDefault();\n      const roomName = e.target.value;\n\n      if (roomName == undefined || roomName == \"undefined\") {\n        alert(\"방을 다시 선택해주세요\");\n      } else {\n        var _s = $RefreshSig$();\n\n        _s(getRoomsAuth(roomName, _s(function (res) {\n          _s();\n\n          if (Object.keys(res).includes(authService.currentUser.uid)) {\n            console.log(\"[\" + roomName + \"] 입장\");\n            const chatList = getChatInfo(roomName);\n            const navigate = useNavigate();\n            navigate('/chat', {\n              roomName: roomName,\n              chatList: chatList\n            }); // navigate(`/chat?room=${roomName}`);\n          } else {\n            alert(\"'\" + roomName + \"' 방 입장권한이 없습니다.\");\n          }\n        }, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n          return [useNavigate];\n        })), \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n          return [useNavigate];\n        });\n      }\n    };\n\n    const handleGoogleLogOut = async () => {\n      try {\n        await logout();\n      } catch (error) {\n        console.log(error);\n      }\n    }; // ETC ----------------------------------------------\n\n\n    let itemId = 1;\n\n    const createItem = text => {\n      return itemId++ + text;\n    }; // --------------------------------------------------\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-wrap\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"logout-room\",\n        type: \"button\",\n        onClick: handleGoogleLogOut,\n        children: \"LOGOUT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.rooms\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Room;","map":{"version":3,"sources":["C:/workspaces/atom_workspace/sesh-chatchat/src/pages/Room.js"],"names":["Component","useState","useEffect","useNavigate","getRooms","getRoomsAuth","getAddedChats","authService","logout","Chat","Room","constructor","props","state","chatInfo","rooms","getRoomList","bind","roomObject","myList","list","Object","values","map","roomName","index","handleSelectRoom","createItem","console","log","setState","componentDidMount","render","getChatInfo","e","preventDefault","target","value","undefined","alert","res","keys","includes","currentUser","uid","chatList","navigate","handleGoogleLogOut","error","itemId","text"],"mappings":"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","sourcesContent":["import { Component, useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { getRooms, getRoomsAuth, getAddedChats } from \"../helpers/database\";\r\nimport { authService } from \"../services/firebase\";\r\nimport { logout } from \"../helpers/auth\";\r\nimport Chat from \"./Chat\"\r\nimport \"../rooms.css\"\r\n\r\nclass Room extends Component{\r\n\r\n  constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        chatInfo : {},\r\n        rooms: []\r\n      };\r\n      this.getRoomList = this.getRoomList.bind(this);\r\n  }\r\n\r\n  async getRoomList(roomObject) {\r\n    const myList = () => {\r\n      const list = Object.values(roomObject).map((roomName, index) => (\r\n        <li key={createItem(index+\"li\")}>\r\n          <button\r\n            key={createItem(index+\"room\")}\r\n            className = \"room\"\r\n            type=\"button\"\r\n            onClick={handleSelectRoom}\r\n            value={roomName}>\r\n            <span>{roomName}</span>\r\n          </button>\r\n        </li>\r\n      ));\r\n      return <ul>{list}</ul>;\r\n    };\r\n\r\nconsole.log(myList);\r\n\r\n    this.setState({ rooms: myList });\r\n    // setRooms(myList);\r\n\r\n    // Object.values(roomObject).forEach((roomName, index) => {\r\n    //   getAddedChats(roomName, Chat.setChatUI, function(chatList) {\r\n    //     this.state.chatInfo[`${roomName}`] = chatList;\r\n    //   });\r\n    // });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getRoomList();\r\n  }\r\n\r\n  render() {\r\n\r\n    console.log(this.props);\r\n\r\n    // const [rooms, setRooms] = useState(\"\");\r\n    // const [chatInfo, setChatInfo] = useState({ roomName: \"\", chatList: \"\" });\r\n    // let navigate = useNavigate();\r\n\r\n    function getChatInfo(roomName) {\r\n      return this.state.chatInfo[`${roomName}`];\r\n    }\r\n\r\n  // USE EFFECT  ---------------------------------------\r\n    // useEffect(() => {\r\n    //   getRoomList();\r\n    // }, []);\r\n\r\n\r\n  // HANDLE  -------------------------------------------\r\n    const handleSelectRoom = async (e) => {\r\n      e.preventDefault();\r\n      const roomName = e.target.value;\r\n      if(roomName == undefined || roomName == \"undefined\") {\r\n        alert(\"방을 다시 선택해주세요\");\r\n      }else {\r\n        getRoomsAuth(roomName, function(res) {\r\n          if(Object.keys(res).includes(authService.currentUser.uid)) {\r\n            console.log(\"[\"+roomName+\"] 입장\")\r\n            const chatList = getChatInfo(roomName)\r\n            const navigate = useNavigate();\r\n            navigate('/chat', {roomName: roomName, chatList: chatList});\r\n            // navigate(`/chat?room=${roomName}`);\r\n          }else {\r\n            alert(\"'\"+roomName+\"' 방 입장권한이 없습니다.\")\r\n          }\r\n        })\r\n      }\r\n    };\r\n\r\n    const handleGoogleLogOut = async () => {\r\n      try {\r\n        await logout();\r\n      } catch (error) {\r\n       console.log(error);\r\n      }\r\n    };\r\n\r\n\r\n  // ETC ----------------------------------------------\r\n    let itemId = 1;\r\n    const createItem = (text) => {\r\n      return (itemId++) + text;\r\n    }\r\n  // --------------------------------------------------\r\n\r\n\r\n    return (\r\n      <div className=\"room-wrap\">\r\n        <button\r\n          className=\"logout-room\"\r\n          type=\"button\"\r\n          onClick={handleGoogleLogOut}>\r\n          LOGOUT\r\n        </button>\r\n        <br/><br/>\r\n        <div>\r\n          {this.state.rooms}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Room;\r\n"]},"metadata":{},"sourceType":"module"}
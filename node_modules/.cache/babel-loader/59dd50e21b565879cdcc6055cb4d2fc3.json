{"ast":null,"code":"import { useNavigate } from \"react-router-dom\";\nexport function useNotification(title, option) {\n  if (!(\"Notification\" in window)) {\n    return;\n  }\n\n  if (Notification.permission !== \"granted\") {\n    try {\n      Notification.requestPermission().then(permission => {\n        if (permission !== 'granted') return;\n      });\n    } catch (error) {\n      if (error instanceof TypeError) {\n        Notification.requestPermission(permission => {\n          if (permission !== 'granted') return;\n        });\n      } else {\n        console.error(error);\n      }\n    }\n  } else {\n    var notification = new Notification(title, option);\n    self.addEventListener('notificationclick', function (event) {\n      // notification.onclick = function(event) {\n      let url = 'http://localhost:3000/#/chat?room=' + title;\n      event.waitUntil(clients.matchAll({\n        type: 'window'\n      }).then(windowClients => {\n        // Check if there is already a window/tab open with the target URL\n        for (var i = 0; i < windowClients.length; i++) {\n          var client = windowClients[i]; // If so, just focus it.\n\n          console.log(client.url);\n\n          if (client.url === url && 'focus' in client) {\n            return client.focus();\n          }\n        } // If not, then open the target URL in a new window/tab.\n\n\n        if (clients.openWindow) {\n          return clients.openWindow(url);\n        }\n      })); // event.preventDefault();\n      // window.focus();\n      // navigate(`/chat?room=${title}`);\n      // notificationRef.close();\n    });\n  }\n}\n;","map":{"version":3,"sources":["C:/workspaces/atom_workspace/sesh-chatchat/src/helpers/useNotification.js"],"names":["useNavigate","useNotification","title","option","window","Notification","permission","requestPermission","then","error","TypeError","console","notification","self","addEventListener","event","url","waitUntil","clients","matchAll","type","windowClients","i","length","client","log","focus","openWindow"],"mappings":"AACA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,MAAhC,EAAwC;AAE7C,MAAI,EAAE,kBAAkBC,MAApB,CAAJ,EAAiC;AAC/B;AACD;;AAED,MAAIC,YAAY,CAACC,UAAb,KAA4B,SAAhC,EAA2C;AACzC,QAAI;AACFD,MAAAA,YAAY,CAACE,iBAAb,GAAiCC,IAAjC,CAAuCF,UAAD,IAAgB;AACpD,YAAIA,UAAU,KAAK,SAAnB,EAA8B;AAC/B,OAFD;AAGD,KAJD,CAIE,OAAOG,KAAP,EAAc;AACd,UAAIA,KAAK,YAAYC,SAArB,EAAgC;AAC9BL,QAAAA,YAAY,CAACE,iBAAb,CAAgCD,UAAD,IAAgB;AAC7C,cAAIA,UAAU,KAAK,SAAnB,EAA8B;AAC/B,SAFD;AAGD,OAJD,MAIO;AACLK,QAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;AACF;AACF,GAdD,MAcM;AACJ,QAAIG,YAAY,GAAG,IAAIP,YAAJ,CAAiBH,KAAjB,EAAwBC,MAAxB,CAAnB;AACAU,IAAAA,IAAI,CAACC,gBAAL,CAAsB,mBAAtB,EAA2C,UAASC,KAAT,EAAgB;AAC3D;AAEE,UAAIC,GAAG,GAAG,uCAAqCd,KAA/C;AACAa,MAAAA,KAAK,CAACE,SAAN,CACIC,OAAO,CAACC,QAAR,CAAiB;AAACC,QAAAA,IAAI,EAAE;AAAP,OAAjB,EAAmCZ,IAAnC,CAAyCa,aAAa,IAAI;AACtD;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,aAAa,CAACE,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3C,cAAIE,MAAM,GAAGH,aAAa,CAACC,CAAD,CAA1B,CAD2C,CAE3C;;AACAX,UAAAA,OAAO,CAACc,GAAR,CAAYD,MAAM,CAACR,GAAnB;;AACA,cAAIQ,MAAM,CAACR,GAAP,KAAeA,GAAf,IAAsB,WAAWQ,MAArC,EAA6C;AACzC,mBAAOA,MAAM,CAACE,KAAP,EAAP;AACH;AACJ,SATqD,CAUtD;;;AACA,YAAIR,OAAO,CAACS,UAAZ,EAAwB;AACpB,iBAAOT,OAAO,CAACS,UAAR,CAAmBX,GAAnB,CAAP;AACH;AACJ,OAdD,CADJ,EAJyD,CAsBzD;AACA;AAEA;AACA;AACD,KA3BD;AA4BD;AAEF;AAAA","sourcesContent":["\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport function useNotification(title, option) {\r\n\r\n  if (!(\"Notification\" in window)) {\r\n    return;\r\n  }\r\n\r\n  if (Notification.permission !== \"granted\") {\r\n    try {\r\n      Notification.requestPermission().then((permission) => {\r\n        if (permission !== 'granted') return;\r\n      });\r\n    } catch (error) {\r\n      if (error instanceof TypeError) {\r\n        Notification.requestPermission((permission) => {\r\n          if (permission !== 'granted') return;\r\n        });\r\n      } else {\r\n        console.error(error);\r\n      }\r\n    }\r\n  }else {\r\n    var notification = new Notification(title, option);\r\n    self.addEventListener('notificationclick', function(event) {\r\n    // notification.onclick = function(event) {\r\n\r\n      let url = 'http://localhost:3000/#/chat?room='+title;\r\n      event.waitUntil(\r\n          clients.matchAll({type: 'window'}).then( windowClients => {\r\n              // Check if there is already a window/tab open with the target URL\r\n              for (var i = 0; i < windowClients.length; i++) {\r\n                  var client = windowClients[i];\r\n                  // If so, just focus it.\r\n                  console.log(client.url);\r\n                  if (client.url === url && 'focus' in client) {\r\n                      return client.focus();\r\n                  }\r\n              }\r\n              // If not, then open the target URL in a new window/tab.\r\n              if (clients.openWindow) {\r\n                  return clients.openWindow(url);\r\n              }\r\n          })\r\n      );\r\n\r\n      // event.preventDefault();\r\n      // window.focus();\r\n\r\n      // navigate(`/chat?room=${title}`);\r\n      // notificationRef.close();\r\n    })\r\n  }\r\n\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspaces\\\\atom_workspace\\\\sesh-chatchat\\\\src\\\\pages\\\\Room.js\",\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getRoomsInfo, getRoomsAuth, getCommonInfo, setCommonInfo } from \"../helpers/database\";\nimport { authService } from \"../services/firebase\";\nimport { logout } from \"../helpers/auth\";\nimport useNotification from \"../helpers/useNotification\";\nimport \"../rooms.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Room() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [roomList, setRoomList] = useState(\"\");\n  let navigate = useNavigate();\n  let isMount = true;\n  let selectedRoom = \"\";\n  let checkRooms = {};\n\n  const getRoomList = async () => {\n    const callback = rooms => {\n      Object.keys(rooms).forEach((roomName, index) => getRoomsAuth(roomName, function (res) {\n        if (Object.keys(res).includes(authService.currentUser.uid)) {\n          checkRooms[roomName] = rooms[roomName];\n        }\n\n        console.log(index);\n        console.log(Object.keys(rooms).length);\n      }));\n\n      const myList = () => {\n        const list = Object.keys(checkRooms).map((roomName, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"room\",\n            type: \"button\",\n            onClick: handleSelectRoom,\n            value: roomName,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: roomName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 15\n            }, this)\n          }, createItem(index + \"room\"), false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this)\n        }, createItem(index + \"li\"), false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this));\n        return /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: list\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 16\n        }, this);\n      };\n\n      setRoomList(myList);\n    };\n\n    const notiCallback = (roomName, chatInfo) => {\n      getRoomsAuth(roomName, function (res) {\n        if (Object.keys(res).includes(authService.currentUser.uid)) {\n          const selectedRoom = getCommonInfo(\"selectedRoom\");\n\n          if (chatInfo.date > Date.now() && (isMount || !isMount && selectedRoom != roomName)) {\n            notify(roomName, chatInfo.uid);\n          }\n        }\n      });\n    };\n\n    getRoomsInfo(callback, notiCallback);\n  };\n\n  const notify = (roomName, uid) => {\n    _s();\n\n    if (uid !== authService.currentUser.uid) {\n      useNotification('SESH', {\n        body: \"from '\" + roomName + \"''\"\n      });\n    }\n  }; // USE EFFECT  ---------------------------------------\n\n\n  _s(notify, \"5Wvo13JDZyE5NG8yw+lSYQ3PyGg=\", false, function () {\n    return [useNotification];\n  });\n\n  useEffect(() => {\n    getRoomList();\n    setCommonInfo(\"selectedRoom\", \"\");\n    return () => {\n      isMount = false;\n    };\n  }, []); // HANDLE  -------------------------------------------\n\n  const handleSelectRoom = async e => {\n    e.preventDefault();\n    const roomName = e.target.value;\n\n    if (roomName == undefined || roomName == \"undefined\") {\n      alert(\"방을 다시 선택해주세요\");\n    } else {\n      getRoomsAuth(roomName, function (res) {\n        if (Object.keys(res).includes(authService.currentUser.uid)) {\n          console.log(\"[\" + roomName + \"] 입장\");\n          setCommonInfo(\"selectedRoom\", roomName);\n          navigate(`/chat?room=${roomName}`);\n        } else {\n          alert(\"'\" + roomName + \"' 방 입장권한이 없습니다.\");\n        }\n      });\n    }\n  };\n\n  const handleGoogleLogOut = async () => {\n    try {\n      await logout();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ETC ----------------------------------------------\n\n\n  let itemId = 1;\n\n  const createItem = text => {\n    return itemId++ + text;\n  }; // --------------------------------------------------\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room-wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"logout-room\",\n      type: \"button\",\n      onClick: handleGoogleLogOut,\n      children: \"LOGOUT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: roomList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Room, \"u5sjzhVCiKk8cjGmGjLnom5iOQg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Room;\nexport default Room;\n\nvar _c;\n\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"sources":["C:/workspaces/atom_workspace/sesh-chatchat/src/pages/Room.js"],"names":["useState","useEffect","useNavigate","getRoomsInfo","getRoomsAuth","getCommonInfo","setCommonInfo","authService","logout","useNotification","Room","roomList","setRoomList","navigate","isMount","selectedRoom","checkRooms","getRoomList","callback","rooms","Object","keys","forEach","roomName","index","res","includes","currentUser","uid","console","log","length","myList","list","map","handleSelectRoom","createItem","notiCallback","chatInfo","date","Date","now","notify","body","e","preventDefault","target","value","undefined","alert","handleGoogleLogOut","error","itemId","text"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { getRoomsInfo, getRoomsAuth, getCommonInfo, setCommonInfo } from \"../helpers/database\";\r\nimport { authService } from \"../services/firebase\";\r\nimport { logout } from \"../helpers/auth\";\r\nimport useNotification from \"../helpers/useNotification\";\r\nimport \"../rooms.css\"\r\n\r\nfunction Room() {\r\n\r\n  const [roomList, setRoomList] = useState(\"\");\r\n  let navigate = useNavigate();\r\n  let isMount = true;\r\n  let selectedRoom = \"\";\r\n  let checkRooms = {};\r\n\r\n  const getRoomList = async() => {\r\n\r\n    const callback = (rooms) => {\r\n\r\n      Object.keys(rooms).forEach((roomName, index) => (\r\n        getRoomsAuth(roomName, function(res) {\r\n          if(Object.keys(res).includes(authService.currentUser.uid)) {\r\n            checkRooms[roomName] = rooms[roomName]\r\n          }\r\n          console.log(index)\r\n          console.log(Object.keys(rooms).length)\r\n        })\r\n      ));\r\n\r\n      const myList = () => {\r\n        const list = Object.keys(checkRooms).map((roomName, index) => (\r\n          <li key={createItem(index+\"li\")}>\r\n            <button\r\n              key={createItem(index+\"room\")}\r\n              className = \"room\"\r\n              type=\"button\"\r\n              onClick={handleSelectRoom}\r\n              value={roomName}>\r\n              <span>{roomName}</span>\r\n            </button>\r\n          </li>\r\n        ));\r\n        return <ul>{list}</ul>;\r\n      };\r\n\r\n      setRoomList(myList);\r\n    }\r\n\r\n    const notiCallback = (roomName, chatInfo) => {\r\n      getRoomsAuth(roomName, function(res) {\r\n        if(Object.keys(res).includes(authService.currentUser.uid)) {\r\n          const selectedRoom = getCommonInfo(\"selectedRoom\");\r\n          if(chatInfo.date > Date.now()\r\n                && (isMount || (!isMount && selectedRoom != roomName))) {\r\n            notify(roomName, chatInfo.uid);\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    getRoomsInfo(callback, notiCallback);\r\n\r\n  };\r\n\r\n  const notify = (roomName, uid) => {\r\n    if(uid !== authService.currentUser.uid) {\r\n      useNotification('SESH', {\r\n        body: \"from '\"+roomName+\"''\"\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n// USE EFFECT  ---------------------------------------\r\n  useEffect(() => {\r\n    getRoomList();\r\n    setCommonInfo(\"selectedRoom\", \"\");\r\n    return() => {\r\n      isMount = false;\r\n    }\r\n  }, []);\r\n\r\n\r\n// HANDLE  -------------------------------------------\r\n  const handleSelectRoom = async (e) => {\r\n    e.preventDefault();\r\n    const roomName = e.target.value;\r\n    if(roomName == undefined || roomName == \"undefined\") {\r\n      alert(\"방을 다시 선택해주세요\");\r\n    }else {\r\n      getRoomsAuth(roomName, function(res) {\r\n        if(Object.keys(res).includes(authService.currentUser.uid)) {\r\n          console.log(\"[\"+roomName+\"] 입장\")\r\n          setCommonInfo(\"selectedRoom\", roomName);\r\n          navigate(`/chat?room=${roomName}`);\r\n        }else {\r\n          alert(\"'\"+roomName+\"' 방 입장권한이 없습니다.\")\r\n        }\r\n      })\r\n    }\r\n  };\r\n\r\n  const handleGoogleLogOut = async () => {\r\n    try {\r\n      await logout();\r\n    } catch (error) {\r\n     console.log(error);\r\n    }\r\n  };\r\n\r\n\r\n// ETC ----------------------------------------------\r\n  let itemId = 1;\r\n  const createItem = (text) => {\r\n    return (itemId++) + text;\r\n  }\r\n// --------------------------------------------------\r\n\r\n\r\n  return (\r\n    <div className=\"room-wrap\">\r\n      <button\r\n        className=\"logout-room\"\r\n        type=\"button\"\r\n        onClick={handleGoogleLogOut}>\r\n        LOGOUT\r\n      </button>\r\n      <br/><br/>\r\n      <div>\r\n        {roomList}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Room;\r\n"]},"metadata":{},"sourceType":"module"}
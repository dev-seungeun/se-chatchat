{"ast":null,"code":"import { database, database_set, database_ref, database_update, database_on_value } from \"../services/firebase\";\nimport { onChildAdded, onChildChanged, off, get, child, onValue, query, orderByKey, orderByChild, limitToLast, startAt } from \"firebase/database\";\nconst info = {\n  roomsInfo: false,\n  addedChats: {},\n  selectedRoom: \"\",\n  themeInfo: {\n    theme: \"light\",\n    themeTxt: \"DARK\"\n  }\n};\nexport function getCommonInfo(key) {\n  return info[key];\n}\nexport function setCommonInfo(key, value) {\n  info[key] = value;\n}\nexport function getRoomsInfo(callback, notiCallback) {\n  const roomRef = database_ref(database, \"chats/rooms\");\n  onValue(roomRef, snapshot => {\n    callback(snapshot.val());\n  });\n\n  if (!info.roomsInfo) {\n    onChildChanged(roomRef, snapshot => {\n      notiCallback(snapshot.key, snapshot.val());\n    });\n  }\n\n  info.roomsInfo = true;\n}\nexport function getRoomsAuth(roomName, callback) {\n  const roomAuthRef = query(database_ref(database, 'chats/' + roomName + \"/members\"), limitToLast(10));\n  onValue(roomAuthRef, snapshot => {\n    callback(snapshot.val());\n  });\n}\nexport function sendChatTime(roomName, uid) {\n  return database_update(database_ref(database, 'chats/rooms/' + roomName), {\n    date: Date.now() + 1000,\n    uid: uid\n  });\n}\nexport function sendChat(roomName, data) {\n  const date = new Date();\n  const today = date.getFullYear() + \"\" + (\"0\" + (date.getMonth() + 1)).slice(-2) + \"\" + (\"0\" + date.getDate()).slice(-2);\n  return database_set(database_ref(database, 'chats/' + roomName + \"/messages/\" + today + \"/\" + data.timestamp), {\n    message: data.message,\n    timestamp: data.timestamp,\n    email: data.email,\n    uid: data.uid\n  });\n}\nexport function getAddedChats(roomName, callback) {\n  const date = new Date();\n  const today = date.getFullYear() + \"\" + (\"0\" + (date.getMonth() + 1)).slice(-2) + \"\" + (\"0\" + date.getDate()).slice(-2);\n  ;\n  let chatList = [];\n  let lastChat = null;\n  const chatRef = query(database_ref(database, 'chats/' + roomName + \"/messages/\" + today), limitToLast(10));\n  onChildAdded(chatRef, snapshot => {\n    console.log(snapshot);\n\n    if (snapshot.val().hasOwnProperty(\"uid\")) {\n      chatList.push(snapshot.val());\n      console.log(snapshot.val());\n    }\n\n    callback(chatList);\n  });\n  callback(chatList, true);\n  get(child(database_ref(database), 'chats/' + roomName + \"/messages/\" + today), limitToLast(1)).then(snapshot => {\n    if (snapshot.exists()) {\n      console.log(snapshot.val());\n    } else {\n      console.log(\"No data available\");\n    }\n  }).catch(error => {\n    console.error(error);\n  });\n}\n/*\r\nexport function getChats(roomName, callback) {\r\n  let chatList = [];\r\n  const date = new Date();\r\n  const today = (new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0)).getTime();\r\n  const chatRef = query(database_ref(database, 'chats/'+roomName), orderByKey(), startAt(today.toString()), limitToLast(10));\r\n  const chatRef2 = database_ref(database);\r\n  get(child(chatRef2, 'chats/'+roomName), limitToLast(10)).then((snapshot) => {\r\n    snapshot.forEach((row) => {\r\n      chatList.push(row.val());\r\n    });\r\n  },[]);\r\n  callback(chatList);\r\n}\r\n*/","map":{"version":3,"sources":["C:/MyDocuments/workspaces/atom_workspace/sesh-chatchat/src/helpers/database.js"],"names":["database","database_set","database_ref","database_update","database_on_value","onChildAdded","onChildChanged","off","get","child","onValue","query","orderByKey","orderByChild","limitToLast","startAt","info","roomsInfo","addedChats","selectedRoom","themeInfo","theme","themeTxt","getCommonInfo","key","setCommonInfo","value","getRoomsInfo","callback","notiCallback","roomRef","snapshot","val","getRoomsAuth","roomName","roomAuthRef","sendChatTime","uid","date","Date","now","sendChat","data","today","getFullYear","getMonth","slice","getDate","timestamp","message","email","getAddedChats","chatList","lastChat","chatRef","console","log","hasOwnProperty","push","then","exists","catch","error"],"mappings":"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","sourcesContent":["import { database, database_set, database_ref, database_update, database_on_value } from \"../services/firebase\";\r\nimport { onChildAdded, onChildChanged, off, get, child, onValue, query, orderByKey, orderByChild, limitToLast, startAt } from \"firebase/database\";\r\n\r\nconst info = {roomsInfo: false, addedChats: {}, selectedRoom: \"\", themeInfo: {theme:\"light\", themeTxt:\"DARK\"}};\r\n\r\nexport function getCommonInfo(key) {\r\n    return info[key];\r\n}\r\nexport function setCommonInfo(key, value) {\r\n    info[key] = value;\r\n}\r\n\r\nexport function getRoomsInfo(callback, notiCallback) {\r\n  const roomRef = database_ref(database, \"chats/rooms\");\r\n  onValue(roomRef, (snapshot) => {\r\n    callback(snapshot.val());\r\n  });\r\n  if(!info.roomsInfo) {\r\n    onChildChanged(roomRef, (snapshot) => {\r\n      notiCallback(snapshot.key, snapshot.val());\r\n    });\r\n  }\r\n  info.roomsInfo = true;\r\n}\r\n\r\nexport function getRoomsAuth(roomName, callback) {\r\n  const roomAuthRef = query(database_ref(database, 'chats/'+roomName+\"/members\"), limitToLast(10));\r\n  onValue(roomAuthRef, (snapshot) => {\r\n    callback(snapshot.val());\r\n  });\r\n}\r\n\r\nexport function sendChatTime(roomName, uid) {\r\n  return database_update(database_ref(database, 'chats/rooms/'+roomName), {\r\n    date: Date.now()+1000,\r\n    uid : uid\r\n  });\r\n}\r\n\r\nexport function sendChat(roomName, data) {\r\n  const date = new Date();\r\n  const today = date.getFullYear()+\"\"+(\"0\" + (date.getMonth() + 1)).slice(-2)+\"\"+(\"0\" + date.getDate()).slice(-2);\r\n  return database_set(database_ref(database, 'chats/'+roomName+\"/messages/\"+today+\"/\"+data.timestamp), {\r\n    message: data.message,\r\n    timestamp: data.timestamp,\r\n    email: data.email,\r\n    uid: data.uid\r\n  });\r\n}\r\n\r\nexport function getAddedChats(roomName, callback) {\r\n  const date = new Date();\r\n  const today = date.getFullYear()+\"\"+(\"0\" + (date.getMonth() + 1)).slice(-2)+\"\"+(\"0\" + date.getDate()).slice(-2);;\r\n  let chatList = [];\r\n  let lastChat = null;\r\n  const chatRef = query(database_ref(database, 'chats/'+roomName+\"/messages/\"+today), limitToLast(10));\r\n  onChildAdded(chatRef, (snapshot) => {\r\n    console.log(snapshot);\r\n    if(snapshot.val().hasOwnProperty(\"uid\")) {\r\n      chatList.push(snapshot.val());\r\n      console.log(snapshot.val());\r\n    }\r\n    callback(chatList);\r\n  });\r\n  callback(chatList, true);\r\n\r\n  get(child(database_ref(database), 'chats/'+roomName+\"/messages/\"+today), limitToLast(1)).then((snapshot) => {\r\n    if (snapshot.exists()) {\r\n      console.log(snapshot.val());\r\n    } else {\r\n      console.log(\"No data available\");\r\n    }\r\n  }).catch((error) => {\r\n    console.error(error);\r\n  });\r\n}\r\n\r\n/*\r\nexport function getChats(roomName, callback) {\r\n  let chatList = [];\r\n  const date = new Date();\r\n  const today = (new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0)).getTime();\r\n  const chatRef = query(database_ref(database, 'chats/'+roomName), orderByKey(), startAt(today.toString()), limitToLast(10));\r\n  const chatRef2 = database_ref(database);\r\n  get(child(chatRef2, 'chats/'+roomName), limitToLast(10)).then((snapshot) => {\r\n    snapshot.forEach((row) => {\r\n      chatList.push(row.val());\r\n    });\r\n  },[]);\r\n  callback(chatList);\r\n}\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}
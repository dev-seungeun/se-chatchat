{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspaces\\\\atom_workspace\\\\sesh-chatchat\\\\src\\\\pages\\\\Room.js\",\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getRoomsInfo, getRoomsAuth } from \"../helpers/database\";\nimport { authService } from \"../services/firebase\";\nimport { logout } from \"../helpers/auth\";\nimport useNotification from \"../helpers/useNotification\";\nimport \"../rooms.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Room() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [roomList, setRoomList] = useState(\"\");\n  let navigate = useNavigate();\n  let rooms = [];\n\n  const getRoomList = async () => {\n    getRoomsInfo(function (roomName, chatInfo) {\n      rooms.push(roomName);\n      console.log(roomName);\n      console.log(chatInfo.date);\n      console.log(chatInfo.uid);\n\n      if (chatInfo.date > Date.now()) {\n        notify(roomName, chatInfo.uid);\n      }\n\n      const myList = () => {\n        const list = rooms.map((roomName, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"room\",\n            type: \"button\",\n            onClick: handleSelectRoom,\n            value: roomName,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: roomName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 17\n            }, this)\n          }, createItem(index + \"room\"), false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 15\n          }, this)\n        }, createItem(index + \"li\"), false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this));\n        return /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: list\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 18\n        }, this);\n      };\n\n      setRoomList(myList);\n    });\n  };\n\n  const notify = (roomName, uid) => {\n    _s();\n\n    if (uid !== authService.currentUser.uid) {\n      useNotification('SESH', {\n        body: \"from '\" + roomName + \"''\"\n      });\n    }\n  }; // USE EFFECT  ---------------------------------------\n\n\n  _s(notify, \"5Wvo13JDZyE5NG8yw+lSYQ3PyGg=\", false, function () {\n    return [useNotification];\n  });\n\n  useEffect(() => {\n    getRoomList();\n  }, []); // HANDLE  -------------------------------------------\n\n  const handleSelectRoom = async e => {\n    e.preventDefault();\n    const roomName = e.target.value;\n\n    if (roomName == undefined || roomName == \"undefined\") {\n      alert(\"방을 다시 선택해주세요\");\n    } else {\n      getRoomsAuth(roomName, function (res) {\n        if (Object.keys(res).includes(authService.currentUser.uid)) {\n          console.log(\"[\" + roomName + \"] 입장\");\n          navigate(`/chat?room=${roomName}`);\n        } else {\n          alert(\"'\" + roomName + \"' 방 입장권한이 없습니다.\");\n        }\n      });\n    }\n  };\n\n  const handleGoogleLogOut = async () => {\n    try {\n      await logout();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ETC ----------------------------------------------\n\n\n  let itemId = 1;\n\n  const createItem = text => {\n    return itemId++ + text;\n  }; // --------------------------------------------------\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room-wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"logout-room\",\n      type: \"button\",\n      onClick: handleGoogleLogOut,\n      children: \"LOGOUT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: roomList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Room, \"u5sjzhVCiKk8cjGmGjLnom5iOQg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Room;\nexport default Room;\n\nvar _c;\n\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"sources":["C:/workspaces/atom_workspace/sesh-chatchat/src/pages/Room.js"],"names":["useState","useEffect","useNavigate","getRoomsInfo","getRoomsAuth","authService","logout","useNotification","Room","roomList","setRoomList","navigate","rooms","getRoomList","roomName","chatInfo","push","console","log","date","uid","Date","now","notify","myList","list","map","index","handleSelectRoom","createItem","currentUser","body","e","preventDefault","target","value","undefined","alert","res","Object","keys","includes","handleGoogleLogOut","error","itemId","text"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { getRoomsInfo, getRoomsAuth } from \"../helpers/database\";\r\nimport { authService } from \"../services/firebase\";\r\nimport { logout } from \"../helpers/auth\";\r\nimport useNotification from \"../helpers/useNotification\";\r\nimport \"../rooms.css\"\r\n\r\nfunction Room() {\r\n\r\n  const [roomList, setRoomList] = useState(\"\");\r\n  let navigate = useNavigate();\r\n  let rooms = [];\r\n\r\n  const getRoomList = async() => {\r\n\r\n    getRoomsInfo(function(roomName, chatInfo) {\r\n\r\n        rooms.push(roomName);\r\n        console.log(roomName);\r\n        console.log(chatInfo.date);\r\n        console.log(chatInfo.uid);\r\n\r\n        if(chatInfo.date > Date.now()) {\r\n          notify(roomName, chatInfo.uid);\r\n        }\r\n\r\n        const myList = () => {\r\n          const list = rooms.map((roomName, index) => (\r\n            <li key={createItem(index+\"li\")}>\r\n              <button\r\n                key={createItem(index+\"room\")}\r\n                className = \"room\"\r\n                type=\"button\"\r\n                onClick={handleSelectRoom}\r\n                value={roomName}>\r\n                <span>{roomName}</span>\r\n              </button>\r\n            </li>\r\n          ));\r\n          return <ul>{list}</ul>;\r\n        };\r\n\r\n        setRoomList(myList);\r\n\r\n    });\r\n\r\n  };\r\n\r\n  const notify = (roomName, uid) => {\r\n    if(uid !== authService.currentUser.uid) {\r\n      useNotification('SESH', {\r\n        body: \"from '\"+roomName+\"''\"\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n// USE EFFECT  ---------------------------------------\r\n  useEffect(() => {\r\n    getRoomList();\r\n  }, []);\r\n\r\n\r\n// HANDLE  -------------------------------------------\r\n  const handleSelectRoom = async (e) => {\r\n    e.preventDefault();\r\n    const roomName = e.target.value;\r\n    if(roomName == undefined || roomName == \"undefined\") {\r\n      alert(\"방을 다시 선택해주세요\");\r\n    }else {\r\n      getRoomsAuth(roomName, function(res) {\r\n        if(Object.keys(res).includes(authService.currentUser.uid)) {\r\n          console.log(\"[\"+roomName+\"] 입장\")\r\n          navigate(`/chat?room=${roomName}`);\r\n        }else {\r\n          alert(\"'\"+roomName+\"' 방 입장권한이 없습니다.\")\r\n        }\r\n      })\r\n    }\r\n  };\r\n\r\n  const handleGoogleLogOut = async () => {\r\n    try {\r\n      await logout();\r\n    } catch (error) {\r\n     console.log(error);\r\n    }\r\n  };\r\n\r\n\r\n// ETC ----------------------------------------------\r\n  let itemId = 1;\r\n  const createItem = (text) => {\r\n    return (itemId++) + text;\r\n  }\r\n// --------------------------------------------------\r\n\r\n\r\n  return (\r\n    <div className=\"room-wrap\">\r\n      <button\r\n        className=\"logout-room\"\r\n        type=\"button\"\r\n        onClick={handleGoogleLogOut}>\r\n        LOGOUT\r\n      </button>\r\n      <br/><br/>\r\n      <div>\r\n        {roomList}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Room;\r\n"]},"metadata":{},"sourceType":"module"}